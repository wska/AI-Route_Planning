;;;; OPERATORS
; (:operator h P D A [c])
; where:
; - h is the operator's head; is a primitive ordinary task atom (i.e., a non-
;   immediate task atom with a task symbol that begins with an exclamation point).
; - P the operator's precondition; a logical precondition
;   P can contain any variable symbols that can be either in h or not, provided that there
;   can be at most one satisfier for P in the current state at any given point in the planning process.
; - D the operatorâ€™s delete list
; - A the operator's add list
; - c the operator's cost, which defaults to 1 if omitted

;;;; METHODS
; (:method h [name1] L1 T1 [name2] L2 T2 ... [namen] Ln Tn)
; where:
; - h is a compound ordinary task atom -- i.e. the method's head
; - Each Li is a precondition for the method
; - Each T1 is a tail of the method -- i.e. a task list
; - Each namei is the name for the succeeding (Li Ti) pair; useful for debugging domain descriptions

;;;; PROTECTIONS
; A :protection takes a logical atom (a) and should be put in the add list to tell JSHOP2
; that it should not execute any operator that deletes (a)


(defdomain routeplanning
  (
    (:operator (!move-agent ?agent ?location-from ?location-to)
    ()
    ((agent-at ?agent ?location-from))
    ((agent-at ?agent ?location-to) (:protection (agent-at ?agent ?location-to))))

    (:operator (!add-protection ?g)
                ()
                ()
                ((:protection ?g))
                )

    (:operator (!delete-protection ?g)
                ()
                ((:protection ?g))
                ()
                )

    (:method (move-agent ?agent ?location-to)
      agent-already-there
      ((agent-at ?agent ?location-to))
      ((:immediate !add-protection (agent-at ?agent ?location-to)))

      move-agent-to
      ((agent-at ?agent ?location-from))
      ((:immediate !move-agent ?agent ?location-from ?location-to)))
  )
)

